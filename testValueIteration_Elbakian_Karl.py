import sys
sys.path.append('../src/')

import unittest
from ddt import ddt, data, unpack
import valueIteration_Elbakian_Karl as targetCode

@ddt
class TestValueIteration(unittest.TestCase):
    def setUp(self):
        self.transitionTable = {(0, 0): {(0, 1): {(0, 1): 0.8, (1, 0): 0.09999999999999998, (0, 0): 0.09999999999999998}, (0, -1): {(0, 0): 0.9, (1, 0): 0.09999999999999998}, (1, 0): {(1, 0): 0.8, (0, 0): 0.09999999999999998, (0, 1): 0.09999999999999998}, (-1, 0): {(0, 0): 0.9, (0, 1): 0.09999999999999998}}, (0, 1): {(0, 1): {(0, 2): 0.8, (0, 1): 0.19999999999999996}, (0, -1): {(0, 0): 0.8, (0, 1): 0.19999999999999996}, (1, 0): {(0, 1): 0.8, (0, 0): 0.09999999999999998, (0, 2): 0.09999999999999998}, (-1, 0): {(0, 1): 0.8, (0, 2): 0.09999999999999998, (0, 0): 0.09999999999999998}}, (0, 2): {(0, 1): {(0, 2): 0.9, (1, 2): 0.09999999999999998}, (0, -1): {(0, 1): 0.8, (0, 2): 0.09999999999999998, (1, 2): 0.09999999999999998}, (1, 0): {(1, 2): 0.8, (0, 1): 0.09999999999999998, (0, 2): 0.09999999999999998}, (-1, 0): {(0, 2): 0.9, (0, 1): 0.09999999999999998}}, (1, 0): {(0, 1): {(1, 0): 0.8, (2, 0): 0.09999999999999998, (0, 0): 0.09999999999999998}, (0, -1): {(1, 0): 0.8, (0, 0): 0.09999999999999998, (2, 0): 0.09999999999999998}, (1, 0): {(2, 0): 0.8, (1, 0): 0.19999999999999996}, (-1, 0): {(0, 0): 0.8, (1, 0): 0.19999999999999996}}, (1, 2): {(0, 1): {(1, 2): 0.8, (2, 2): 0.09999999999999998, (0, 2): 0.09999999999999998}, (0, -1): {(1, 2): 0.8, (0, 2): 0.09999999999999998, (2, 2): 0.09999999999999998}, (1, 0): {(2, 2): 0.8, (1, 2): 0.19999999999999996}, (-1, 0): {(0, 2): 0.8, (1, 2): 0.19999999999999996}}, (2, 0): {(0, 1): {(2, 1): 0.8, (3, 0): 0.09999999999999998, (1, 0): 0.09999999999999998}, (0, -1): {(2, 0): 0.8, (1, 0): 0.09999999999999998, (3, 0): 0.09999999999999998}, (1, 0): {(3, 0): 0.8, (2, 0): 0.09999999999999998, (2, 1): 0.09999999999999998}, (-1, 0): {(1, 0): 0.8, (2, 1): 0.09999999999999998, (2, 0): 0.09999999999999998}}, (2, 1): {(0, 1): {(2, 2): 0.8, (3, 1): 0.09999999999999998, (2, 1): 0.09999999999999998}, (0, -1): {(2, 0): 0.8, (2, 1): 0.09999999999999998, (3, 1): 0.09999999999999998}, (1, 0): {(3, 1): 0.8, (2, 0): 0.09999999999999998, (2, 2): 0.09999999999999998}, (-1, 0): {(2, 1): 0.8, (2, 2): 0.09999999999999998, (2, 0): 0.09999999999999998}}, (2, 2): {(0, 1): {(2, 2): 0.8, (3, 2): 0.09999999999999998, (1, 2): 0.09999999999999998}, (0, -1): {(2, 1): 0.8, (1, 2): 0.09999999999999998, (3, 2): 0.09999999999999998}, (1, 0): {(3, 2): 0.8, (2, 1): 0.09999999999999998, (2, 2): 0.09999999999999998}, (-1, 0): {(1, 2): 0.8, (2, 2): 0.09999999999999998, (2, 1): 0.09999999999999998}}, (3, 2): {(0, 1): {(3, 2): 0.9, (2, 2): 0.09999999999999998}, (0, -1): {(3, 1): 0.8, (2, 2): 0.09999999999999998, (3, 2): 0.09999999999999998}, (1, 0): {(3, 2): 0.9, (3, 1): 0.09999999999999998}, (-1, 0): {(2, 2): 0.8, (3, 2): 0.09999999999999998, (3, 1): 0.09999999999999998}}}
        
        self.rewardTable = {(0, 0): {(0, 1): {(0, 1): -0.04, (1, 0): -0.04, (0, 0): -0.04}, (0, -1): {(0, 0): -0.04, (1, 0): -0.04}, (1, 0): {(1, 0): -0.04, (0, 0): -0.04, (0, 1): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04}}, (0, 1): {(0, 1): {(0, 2): -0.04, (0, 1): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04}, (1, 0): {(0, 1): -0.04, (0, 0): -0.04, (0, 2): -0.04}, (-1, 0): {(0, 1): -0.04, (0, 2): -0.04, (0, 0): -0.04}}, (0, 2): {(0, 1): {(0, 2): -0.04, (1, 2): -0.04}, (0, -1): {(0, 1): -0.04, (0, 2): -0.04, (1, 2): -0.04}, (1, 0): {(1, 2): -0.04, (0, 1): -0.04, (0, 2): -0.04}, (-1, 0): {(0, 2): -0.04, (0, 1): -0.04}}, (1, 0): {(0, 1): {(1, 0): -0.04, (2, 0): -0.04, (0, 0): -0.04}, (0, -1): {(1, 0): -0.04, (0, 0): -0.04, (2, 0): -0.04}, (1, 0): {(2, 0): -0.04, (1, 0): -0.04}, (-1, 0): {(0, 0): -0.04, (1, 0): -0.04}}, (1, 2): {(0, 1): {(1, 2): -0.04, (2, 2): -0.04, (0, 2): -0.04}, (0, -1): {(1, 2): -0.04, (0, 2): -0.04, (2, 2): -0.04}, (1, 0): {(2, 2): -0.04, (1, 2): -0.04}, (-1, 0): {(0, 2): -0.04, (1, 2): -0.04}}, (2, 0): {(0, 1): {(2, 1): -0.04, (3, 0): 1, (1, 0): -0.04}, (0, -1): {(2, 0): -0.04, (1, 0): -0.04, (3, 0): 1}, (1, 0): {(3, 0): 1, (2, 0): -0.04, (2, 1): -0.04}, (-1, 0): {(1, 0): -0.04, (2, 1): -0.04, (2, 0): -0.04}}, (2, 1): {(0, 1): {(2, 2): -0.04, (3, 1): -1, (2, 1): -0.04}, (0, -1): {(2, 0): -0.04, (2, 1): -0.04, (3, 1): -1}, (1, 0): {(3, 1): -1, (2, 0): -0.04, (2, 2): -0.04}, (-1, 0): {(2, 1): -0.04, (2, 2): -0.04, (2, 0): -0.04}}, (2, 2): {(0, 1): {(2, 2): -0.04, (3, 2): -0.04, (1, 2): -0.04}, (0, -1): {(2, 1): -0.04, (1, 2): -0.04, (3, 2): -0.04}, (1, 0): {(3, 2): -0.04, (2, 1): -0.04, (2, 2): -0.04}, (-1, 0): {(1, 2): -0.04, (2, 2): -0.04, (2, 1): -0.04}}, (3, 2): {(0, 1): {(3, 2): -0.04, (2, 2): -0.04}, (0, -1): {(3, 1): -1, (2, 2): -0.04, (3, 2): -0.04}, (1, 0): {(3, 2): -0.04, (3, 1): -1}, (-1, 0): {(2, 2): -0.04, (3, 2): -0.04, (3, 1): -1}}}
        
        self.V = {s:sum(s) for s in self.transitionTable.keys()}

    #Still unit test this function, however also define it because it is a parameter for another function.
    def getSPrimeRDistributionFull(self, s, action, transitionTable, rewardTable): 
        reward=lambda sPrime: rewardTable[s][action][sPrime]
        p=lambda sPrime: transitionTable[s][action][sPrime]
        sPrimeRDistribution={(sPrime, reward(sPrime)): p(sPrime) for sPrime in transitionTable[s][action].keys()}
        return sPrimeRDistribution

    #Unit test for expectation function
    @data(({1: 1/6, -1/2: 1/3, 1/3: 1/4, -1/4: 3/12}, lambda x: x**2, 0.2934))
    @unpack
    def test_expect(self, xDistribution, function, expectedResult, roundingTolerance = 4):
        calculatedResult = targetCode.expect(xDistribution, function)
        calculatedResult = round(calculatedResult, roundingTolerance)
        expectedResult = round(expectedResult, roundingTolerance)
        self.assertEqual(calculatedResult, expectedResult)

    #Unit test for getSPrimeRDistributionFull function
    s = (0,0)
    action = (0,1)
    expectedResult = {((0,1), -0.04): .8, ((1,0), -0.04): 0.09999999999999998, ((0,0), -0.04): 0.09999999999999998}
    @data((s, action, expectedResult))
    @unpack
    def test_getSPrimeRDistributionFull(self, s, action, expectedResult):
        calculatedResult = targetCode.getSPrimeRDistributionFull(s, action, self.transitionTable, self.rewardTable)     
        self.assertDictEqual(calculatedResult, expectedResult)

    
    #Unit test for bellmanUpdate function
    s2 = (0,1)
    gamma = 0.1
    roundingTolerance= 10e-7
    expectedResult = ({(0, 1): 1.0}, 0.14)
    @data((s2, gamma, roundingTolerance, expectedResult))
    @unpack
    def test_bellmanUpdate(self, s, gamma, roundingTolerance, expectedResult):
        calculatedResult = targetCode.bellmanUpdate(s, self.V, self.transitionTable, self.rewardTable, self.getSPrimeRDistributionFull, gamma, roundingTolerance)
        self.assertTupleEqual(calculatedResult, expectedResult)
    
    def tearDown(self):
       pass
 
if __name__ == '__main__':
    unittest.main(verbosity=2)